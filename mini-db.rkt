#lang racket/base
(require (for-syntax racket/base
                     )
         racket/stxparam)

(provide make-database)

(define-syntax (make-database stx)
  (syntax-case stx ()
    ((_ name)
     (let* ((N (syntax->datum #'name))
            (grow-name (datum->syntax stx (string->symbol (format "increase-~a-storage" N))))
            (add-name (datum->syntax stx (string->symbol (format "add-~a-data!" N))))
            (clear-name (datum->syntax stx (string->symbol (format "clear-~a!" N))))
            (max-name (datum->syntax stx (string->symbol (format "~a-max-index" N))))
            (current-name (datum->syntax stx (string->symbol (format "~a-current-index" N)))))
       (with-syntax ((grow grow-name)
                     (add add-name)
                     (clear clear-name)
                     (max max-name)
                     (current current-name))
         #'(make-db 8 name grow add clear max current))))))

(define-syntax-rule (make-db start-storage db grower adder clearer max-index current-index)
  (begin
    (define db (make-vector start-storage #f))
    (define max-index (sub1 start-storage ))
    (define current-index 0)
    (define (grower)
      (let ((new-count (* 2 (add1 max-index))))
        (let ((new-db (make-vector new-count #f)))
          (set! max-index (sub1 new-count))
          (vector-copy! new-db 0 db)
          (set! db new-db))))
    (define (clearer)
      (vector-fill! db #f)
      (set! current-index 0))
    (define (adder data)
      (when (= current-index max-index)
        (grower))
      (vector-set! db current-index data)
      (set! current-index (add1 current-index))
      (sub1 current-index))))